# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: mapless
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.8
  #region: sa-east-1
  apiKeys:
    - mapless-default
  environment:
    WEBSOCKET_API_ENDPOINT: "https://2tthp39hbk.execute-api.us-east-1.amazonaws.com/dev"
  usagePlan:
    quota:
      limit: 1000000
      period: DAY
    throttle:
      burstLimit: 200000
      rateLimit: 100000
  websocketsApiName: "${self:service}-${self:provider.stage}-ws"
  websocketsApiRouteSelectionExpression: "$request.body.action"

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  exclude:
    - .venv/**
    - .vscode/**
    - samples/**

functions:
  portscan:
    handler: functions.port_scanner.handler
    events:
      - http:
          path: portscan
          timeout: 5 # optional, in seconds, default is 6
          method: get
          private: true
  login_ami:
    handler: functions.login.asterisk_ami.handler
    events:
      - http:
          path: login/ami
          timeout: 5 # optional, in seconds, default is 6
          method: get
          private: true
  login_ssh:
    handler: functions.login.ssh.handler
    events:
      - http:
          path: login/ssh
          timeout: 5 # optional, in seconds, default is 6
          method: get
          private: true
  login_ssh_ws:
    handler: functions.login.ssh.ws_handler
    events:
      - websocket:
          route: login_ssh
  login_http:
    handler: functions.login.http.handler
    events:
      - http:
          path: login/http
          timeout: 5 # optional, in seconds, default is 6
          method: get
          private: true
  login_http_ws:
    handler: functions.login.http.ws_handler
    events:
      - websocket:
          route: login_http
  login_wordpress:
    handler: functions.login.wordpress.handler
    events:
      - http:
          path: login/wordpress
          timeout: 5 # optional, in seconds, default is 6
          method: get
          private: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    pythonBin: /usr/bin/python3
